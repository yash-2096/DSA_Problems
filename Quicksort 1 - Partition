Step 1: Divide
Choose some pivot element,p,and partition your unsorted array,arr,into three smaller arrays:left,right and equal, where each element in left<p,each element in right>p,and each element in equal=p .

Example
arr=[5,7,4,3,8]
In this challenge, the pivot will always be at arr[0], so the pivot is 5.

arr is divided into left{4,3},right{7,8}, and equal{5}.
Putting them all together, you get {4,3,5,7,8}. There is a flexible checker that allows the elements of left and right to be in any order. For example, {3,4,5,7,8} is valid as well.

Given arr and p=arr[0], partition arr into left,equal,right using the Divide instructions above. Return a 1-dimensional array containing each element in left, followed by each element in equal, followed by each element in rigth.

Function Description

Complete the quickSort function in the editor below.

quickSort has the following parameter(s):

int arr[n]:arr[0] is the pivot element
Returns

int[n]: an array of integers as described above
Input Format

The first line contains n, the size of arr.
The second line contains n space-separated integers  arr[i](the unsorted array). The first integer, arr[0], is the pivot element,p.
All elements are distinct.
Sample Input

STDIN       Function
-----       --------
5           arr[] size n =5
4 5 3 7 2   arr =[4, 5, 3, 7, 2]
Sample Output

3 2 4 5 7

///**************************************************************************************************************

 public static List<Integer> quickSort(List<Integer> arr) {
    // Write your code here
    int pivot=arr.get(0);
    int mid=arr.size()/2;    
    List<Integer> temp_arr=new ArrayList<Integer>();    
    
        for(int i=0;i<arr.size();i++){
           //left
           if(arr.get(i)<pivot){
            temp_arr.add(arr.get(i));    
           }
        
        }
        temp_arr.add(pivot);
          for(int i=0;i<arr.size();i++){
             //rigth
             if(arr.get(i)>pivot){
              temp_arr.add(arr.get(i));    
             }    
          }
    
    return temp_arr;    
    }
   


